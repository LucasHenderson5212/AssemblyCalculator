0000              1   ; ‘Function Select’ is KEY.3
0000              2   ; ‘Load Number’ is KEY.2
0000              3   ; ‘=’ is KEY.1
0000              4   
                 -1   $MODDE0CV
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER 0 - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER 0 - HIGH BYTE
0000             24   DPL1   DATA  084H  ;DATA POINTER 1 - LOW BYTE
0000             25   DPH1   DATA  085H  ;DATA POINTER 1 - HIGH BYTE
0000             26   DPS    DATA  086H  ;DATA POINTER SELECT. DPH1, DPL1 active when DPS.0=1
0000             27   PCON   DATA  087H  ;POWER CONTROL
0000             28   TCON   DATA  088H  ;TIMER CONTROL
0000             29   TMOD   DATA  089H  ;TIMER MODE
0000             30   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             31   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             32   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             33   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             34   P1     DATA  090H  ;PORT 1
0000             35   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             36   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             37   P2     DATA  0A0H  ;PORT 2
0000             38   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             39   P3     DATA  0B0H  ;PORT 3
0000             40   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             41   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             42   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             43   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             44   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             45   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             46   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             47   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             48   ACC    DATA  0E0H  ;ACCUMULATOR
0000             49   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             50   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             51   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             52   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             53   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             54   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             55   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             56   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             57   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             58   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             59   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             60   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             61   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             62   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             63   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             64   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             65   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             66   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             67   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             68   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             69   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             70   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             71   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             72   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             73   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             74   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             75   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             76   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             77   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             78   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             79   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             80   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             81   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             82   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             83   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             84   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             85   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             86   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             87   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             88   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             89   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             90   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             91   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             92   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             93   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             94   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             95   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             96   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             97   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             98   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             99   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000            100   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000            101   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000            102   
0000            103   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            104   ; we have the following extra registers:
0000            105   
0000            106   HEX0   DATA  091H ; Zero turns the segment on
0000            107   HEX1   DATA  092H ; 
0000            108   HEX2   DATA  093H ; 
0000            109   HEX3   DATA  094H ; 
0000            110   HEX4   DATA  08EH ;
0000            111   HEX5   DATA  08FH ;
0000            112   HEX6   DATA  096H ;
0000            113   HEX7   DATA  097H ;
0000            114   
0000            115   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            116   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            117   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            118   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            119   
0000            120   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            121   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            122   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            123   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            124   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            125   SWB    DATA  095H ; Switches SW8 to SW15
0000            126   SWC    DATA  09EH ; Switches SW16 and SW17
0000            127   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            128   
0000            129   LCD_CMD   DATA 0D8H ;
0000            130   LCD_DATA  DATA 0D9H ;
0000            131   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            132   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            133   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            134   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            135   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            136   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            137   
0000            138   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            139   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            140   ; bit 1: FL_WE_N
0000            141   ; bit 2: FL_OE_N
0000            142   ; bit 3: FL_CE_N
0000            143   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            144   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            145   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            146   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            147   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            148   
0000              6   org 0000H
0000 0203DD       7      ljmp MyProgram
0003              8   
0030              9   dseg at 30h
0030             10   
0030             11   x:               ds      4 ; 32-bits for variable 'x'
0034             12   y:               ds      4 ; 32-bits for variable 'y'
0038             13   bcd:     ds      5 ; 10-digit packed BCD (each byte stores 2 digits)
003D             14   z:               ds  4 ; 32-bits for variable 'z'
0041             15   
0000             16   bseg
0000             17   
0000             18   mf:                      dbit 1 ; Math functions flag
0001             19   hexmode:         dbit 1 ; hex mode flag
0002             20   
                 -1   $include(math32.asm)
                613   $LIST
02CF             22   
02CF             23   CSEG
02CF             24   
02CF             25   ; Look-up table for 7-seg displays
02CF             26   myLUT:
02CF C0F9A4B0    27       DB 0C0H, 0F9H, 0A4H, 0B0H, 099H        ; 0 TO 4
     99
02D4 9282F880    28       DB 092H, 082H, 0F8H, 080H, 090H        ; 4 TO 9
     90
02D9 08034621    29       DB 08H, 03H, 46H, 21H, 06H                      ; A to E
     06
02DE 0E          30       DB 0EH
02DF             31       
                 32   showBCD MAC
                 33   	; Display LSD
                 34       mov A, %0
                 35       anl a, #0fh
                 36       movc A, @A+dptr
                 37       mov %1, A
                 38   	; Display MSD
                 39       mov A, %0
                 40       swap a
                 41       anl a, #0fh
                 42       movc A, @A+dptr
                 43       mov %2, A
                 44   ENDMAC
02DF             45   
02DF             46   Display:
02DF 200131      47            jb hexmode, hextime
02E2 9002CF      48            mov dptr, #myLUT
02E5             49            ; Display LSD
02E5 E538        49       mov A, bcd+0
02E7 540F        49       anl a, #0fh
02E9 93          49       movc A, @A+dptr
02EA F591        49       mov HEX0, A
02EC             49            ; Display MSD
02EC E538        49       mov A, bcd+0
02EE C4          49       swap a
02EF 540F        49       anl a, #0fh
02F1 93          49       movc A, @A+dptr
02F2 F592        49       mov HEX1, A
02F4             50            ; Display LSD
02F4 E539        50       mov A, bcd+1
02F6 540F        50       anl a, #0fh
02F8 93          50       movc A, @A+dptr
02F9 F593        50       mov HEX2, A
02FB             50            ; Display MSD
02FB E539        50       mov A, bcd+1
02FD C4          50       swap a
02FE 540F        50       anl a, #0fh
0300 93          50       movc A, @A+dptr
0301 F594        50       mov HEX3, A
0303             51            ; Display LSD
0303 E53A        51       mov A, bcd+2
0305 540F        51       anl a, #0fh
0307 93          51       movc A, @A+dptr
0308 F58E        51       mov HEX4, A
030A             51            ; Display MSD
030A E53A        51       mov A, bcd+2
030C C4          51       swap a
030D 540F        51       anl a, #0fh
030F 93          51       movc A, @A+dptr
0310 F58F        51       mov HEX5, A
0312 22          52       ret
0313             53       hextime:
0313 9002CF      54       mov dptr, #myLUT
0316             55            ; Display LSD
0316 E530        55       mov A, x+0
0318 540F        55       anl a, #0fh
031A 93          55       movc A, @A+dptr
031B F591        55       mov HEX0, A
031D             55            ; Display MSD
031D E530        55       mov A, x+0
031F C4          55       swap a
0320 540F        55       anl a, #0fh
0322 93          55       movc A, @A+dptr
0323 F592        55       mov HEX1, A
0325             56            ; Display LSD
0325 E531        56       mov A, x+1
0327 540F        56       anl a, #0fh
0329 93          56       movc A, @A+dptr
032A F593        56       mov HEX2, A
032C             56            ; Display MSD
032C E531        56       mov A, x+1
032E C4          56       swap a
032F 540F        56       anl a, #0fh
0331 93          56       movc A, @A+dptr
0332 F594        56       mov HEX3, A
0334             57            ; Display LSD
0334 E532        57       mov A, x+2
0336 540F        57       anl a, #0fh
0338 93          57       movc A, @A+dptr
0339 F58E        57       mov HEX4, A
033B             57            ; Display MSD
033B E532        57       mov A, x+2
033D C4          57       swap a
033E 540F        57       anl a, #0fh
0340 93          57       movc A, @A+dptr
0341 F58F        57       mov HEX5, A
0343 22          58       ret
0344             59       
                 60   MYRLC MAC
                 61   	mov a, %0
                 62   	rlc a
                 63   	mov %0, a
                 64   ENDMAC
0344             65   
0344             66   Shift_Digits:
0344 7804        67            mov R0, #4 ; shift left four bits
0346             68   Shift_Digits_L0:
0346 C3          69            clr c
0347 E538        70            mov a, bcd+0
0349 33          70            rlc a
034A F538        70            mov bcd+0, a
034C E539        71            mov a, bcd+1
034E 33          71            rlc a
034F F539        71            mov bcd+1, a
0351 E53A        72            mov a, bcd+2
0353 33          72            rlc a
0354 F53A        72            mov bcd+2, a
0356 E53B        73            mov a, bcd+3
0358 33          73            rlc a
0359 F53B        73            mov bcd+3, a
035B E53C        74            mov a, bcd+4
035D 33          74            rlc a
035E F53C        74            mov bcd+4, a
0360 D8E4        75            djnz R0, Shift_Digits_L0
0362             76            ; R7 has the new bcd digit      
0362 EF          77            mov a, R7
0363 4538        78            orl a, bcd+0
0365 F538        79            mov bcd+0, a
0367             80            ; bcd+3 and bcd+4 don't fit in the 7-segment displays so make them zero
0367 E4          81            clr a
0368 F53C        82            mov bcd+4, a
036A 22          83            ret
036B             84   
036B             85   Wait50ms:
036B             86   ;33.33MHz, 1 clk per cycle: 0.03us
036B 781E        87            mov R0, #30
036D 794A        88   L3: mov R1, #74
036F 7AFA        89   L2: mov R2, #250
0371 DAFE        90   L1: djnz R2, L1 ;3*250*0.03us=22.5us
0373 D9FA        91       djnz R1, L2 ;74*22.5us=1.665ms
0375 D8F6        92       djnz R0, L3 ;1.665ms*30=50ms
0377 22          93       ret
0378             94       
0378             95   ; Check if SW0 to SW9 are toggled up.  Returns the toggled switch in
0378             96   ; R7.  If the carry is not set, no toggling switches were detected.
0378             97   ReadNumber:
0378 ACE8        98            mov r4, SWA ; Read switches 0 to 7
037A E595        99            mov a, SWB ; Read switches 8 to 9
037C 5403       100            anl a, #00000011B ; Only two bits of SWB available
037E FD         101            mov r5, a
037F EC         102            mov a, r4
0380 4D         103            orl a, r5
0381 602B       104            jz ReadNumber_no_number
0383 12036B     105            lcall Wait50ms ; debounce
0386 E5E8       106            mov a, SWA
0388 C3         107            clr c
0389 9C         108            subb a, r4
038A 7022       109            jnz ReadNumber_no_number ; it was a bounce
038C E595       110            mov a, SWB
038E 5403       111            anl a, #00000011B
0390 C3         112            clr c
0391 9D         113            subb a, r5
0392 701A       114            jnz ReadNumber_no_number ; it was a bounce
0394 7F10       115            mov r7, #16 ; Loop counter
0396            116   ReadNumber_L0:
0396 C3         117            clr c
0397 EC         118            mov a, r4
0398 33         119            rlc a
0399 FC         120            mov r4, a
039A ED         121            mov a, r5
039B 33         122            rlc a
039C FD         123            mov r5, a
039D 4004       124            jc ReadNumber_decode
039F DFF5       125            djnz r7, ReadNumber_L0
03A1 800B       126            sjmp ReadNumber_no_number       
03A3            127   ReadNumber_decode:
03A3 1F         128            dec r7
03A4 D3         129            setb c
03A5            130   ReadNumber_L1:
03A5 E5E8       131            mov a, SWA
03A7 70FC       132            jnz ReadNumber_L1
03A9            133   ReadNumber_L2:
03A9 E595       134            mov a, SWB
03AB 70FC       135            jnz ReadNumber_L2
03AD 22         136            ret
03AE            137   ReadNumber_no_number:
03AE C3         138            clr c
03AF 22         139            ret
03B0            140            
03B0            141   Set_LEDs:
03B0 E5F0       142            mov a, b
03B2 B40003     143            cjne a, #0, f1
03B5 75E801     144            mov LEDRA, #00000001B ; LED0 on for addition
03B8            145   f1:
03B8 B40103     146            cjne a, #1, f2
03BB 75E802     147            mov LEDRA, #00000010B ; LED1 on for subtraction
03BE            148   f2:
03BE B40203     149            cjne a, #2, f3
03C1 75E804     150            mov LEDRA, #00000100B ; LED2 on for multiplication
03C4            151   f3:
03C4 B40303     152            cjne a, #3, f4
03C7 75E808     153            mov LEDRA, #00001000B ; LED3 on for division
03CA            154   f4:
03CA B40403     155            cjne a, #4, f5
03CD 75E810     156            mov LEDRA, #00010000B ; LED4 on for remainder
03D0            157   f5:
03D0 B40503     158            cjne a, #5, f6
03D3 75E820     159            mov LEDRA, #00100000B ; LED5 on for decimal to hex
03D6            160   f6:
03D6 B40603     161            cjne a, #6, f7
03D9 75E840     162            mov LEDRA, #01000000B ; LED6 on for integer square root
03DC            163   f7:
03DC 22         164            ret
03DD            165   
03DD            166   MyProgram:
03DD 75817F     167            mov SP, #7FH
03E0 E4         168            clr a
03E1 F5E8       169            mov LEDRA, a
03E3 F595       170            mov LEDRB, a
03E5 F538       171            mov bcd+0, a
03E7 F539       172            mov bcd+1, a
03E9 F53A       173            mov bcd+2, a
03EB F53B       174            mov bcd+3, a
03ED F53C       175            mov bcd+4, a
03EF 1202DF     176            lcall Display
03F2            177   
03F2            178   forever:
03F2            179            ; This is a good spot to set the LEDs for each operation...
03F2 1203B0     180            lcall Set_LEDs
03F5 20FB10     181            jb KEY.3, no_funct ; If 'Function' key not pressed, skip
03F8 30FBFD     182            jnb KEY.3, $ ; Wait for release of 'Function' key
03FB 05F0       183            inc b ; 'b' is used as function select
03FD E5F0       184            mov a, b ; make sure b is not larger than 5
03FF B407F0     185            cjne a, #7, forever ; ^
0402 75F000     186            mov b, #0 ; ^
0405 0203F2     187            ljmp forever ; Go check for more input
0408            188   no_funct:
0408 20FA1E     189            jb KEY.2, no_load ; If 'Load' key not pressed, skip
040B 30FAFD     190            jnb KEY.2, $ ; Wait for user to release 'Load' key
040E 12008C     191            lcall bcd2hex ; Convert the BCD number to hex in x
0411 12028F     192            lcall copy_xy ; Copy x to y
0414 753000     193            mov x+0, #low (0 % 0x10000) 
0417 753100     193            mov x+1, #high(0 % 0x10000) 
041A 753200     193            mov x+2, #low (0 / 0x10000) 
041D 753300     193            mov x+3, #high(0 / 0x10000)  ; Clear x (this is a macro)
0420 120003     194            lcall hex2bcd ; Convert result in x to BCD
0423 1202DF     195            lcall Display ; Display the new BCD number
0426 0203F2     196            ljmp forever ; Go check for more input
0429            197   no_load:
0429 20F911     198            jb KEY.1, mid_no_equal ; If 'equal' key not pressed, skip
042C 30F9FD     199            jnb KEY.1, $ ; Wait for user to release 'equal' key
042F 12008C     200            lcall bcd2hex ; Convert the BCD number to hex in x
0432 E5F0       201            mov a, b ; Check if we are doing addition
0434 B40009     202            cjne a, #0, no_add ; ^
0437 1200C8     203            lcall add32 ; Perform x+y
043A 020440     204            ljmp no_add
043D            205   
043D            206   mid_no_equal:
043D 0204B7     207            ljmp no_equal
0440            208            
0440            209   ; subtraction
0440            210   no_add:
0440 B40106     211            cjne a, #1, no_sub
0443 1202B6     212            lcall xchg_xy
0446 1200E9     213            lcall sub32
0449            214            
0449            215   ; multiplication
0449            216   no_sub:
0449 B40203     217            cjne a, #2, no_mult
044C 120199     218            lcall mul32
044F            219            
044F            220   ; division
044F            221   no_mult:
044F B40306     222            cjne a, #3, no_div
0452 1202B6     223            lcall xchg_xy
0455 120226     224            lcall div32
0458            225            
0458            226   ; remainder
0458            227   no_div:
0458 B4040C     228            cjne a, #4, no_rem
045B 1202B6     229            lcall xchg_xy
045E            230   rem_loop:
045E 1200E9     231            lcall sub32
0461 12010B     232            lcall x_lt_y
0464 3000F7     233            jnb mf, rem_loop
0467            234            
0467            235   ; decimal to hex         
0467            236   no_rem:
0467 B40502     237            cjne a, #5, no_dectohex
046A D201       238            setb hexmode
046C            239            
046C            240   ; integer square root
046C            241   no_dectohex:
046C B4063F     242            cjne a, #6, done
046F 1202A9     243            lcall copy_xz
0472 753001     244            mov x+0, #low (1 % 0x10000) 
0475 753100     244            mov x+1, #high(1 % 0x10000) 
0478 753200     244            mov x+2, #low (1 / 0x10000) 
047B 753300     244            mov x+3, #high(1 / 0x10000) 
047E            245   
047E            246   loopsqt:
047E 12028F     247       lcall copy_xy
0481 120199     248       lcall mul32
0484 120143     249       lcall x_gt_z
0487 200012     250       jb mf, finsqt
048A 753001     251            mov x+0, #low (1 % 0x10000) 
048D 753100     251            mov x+1, #high(1 % 0x10000) 
0490 753200     251            mov x+2, #low (1 / 0x10000) 
0493 753300     251            mov x+3, #high(1 / 0x10000) 
0496 1200C8     252       lcall add32
0499 02047E     253       ljmp loopsqt
049C            254   
049C            255   finsqt:
049C 753001     256            mov x+0, #low (1 % 0x10000) 
049F 753100     256            mov x+1, #high(1 % 0x10000) 
04A2 753200     256            mov x+2, #low (1 / 0x10000) 
04A5 753300     256            mov x+3, #high(1 / 0x10000) 
04A8 1202B6     257       lcall xchg_xy
04AB 1200E9     258       lcall sub32
04AE            259   
04AE            260   ; last thing to be done          
04AE            261   done:
04AE 120003     262            lcall hex2bcd ; Convert result in x to BCD
04B1 1202DF     263            lcall Display ; Display the new BCD number
04B4 0203F2     264            ljmp forever ; Go check for more input 
04B7            265            
04B7            266   no_equal:
04B7            267            ; get more numbers
04B7 120378     268            lcall ReadNumber
04BA 5008       269            jnc no_new_digit ; Indirect jump to 'forever'
04BC 120344     270            lcall Shift_Digits
04BF C201       271            clr hexmode
04C1 1202DF     272            lcall Display
04C4            273   no_new_digit:
04C4 0203F2     274            ljmp forever ; 'forever' is to far away, need to use ljmp
04C7            275   
04C7            276   EN
